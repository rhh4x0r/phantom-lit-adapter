{"version":3,"file":"phantom-connect.js","sourceRoot":"","sources":["src/phantom-connect.ts"],"names":[],"mappings":"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","sourcesContent":[" import {LitElement, html, css} from 'lit';\n import {customElement, property, state} from 'lit/decorators.js';\n \n /**\n  * Signs.\n  *\n  * @fires count-changed - Indicates when the count changes\n  * @slot - This element has a slot\n  * @csspart button - The button\n  */\n @customElement('phantom-connect')\n export class PhantomConnect extends LitElement {\n\n   static override styles = css`\n     :host {\n       display: block;\n       border: solid 1px gray;\n       padding: 16px;\n       max-width: 800px;\n     }\n   `;\n\n   @state()\n   private status = \"loading\";\n\n   @state()\n   publicKey = \"loading\";\n \n    @property()\n    provider = \"null\";\n \n  \n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    this.getWalletStatus();\n\n    window.solana.on('connect', (publicKey) => {\n      console.log(\"Wallet Connected!\");\n      this.status = \"connected\";\n      this.publicKey = publicKey.toString();\n    });\n\n    window.solana.on('disconnect', () => {\n      console.log(\"Wallet Disconnected!\");\n      this.status = \"disconnected\";\n      this.publicKey = \"disconnected\";\n    });\n  }\n\n  private async getWalletStatus() {\n    this.getProvider();\n\n    await window.solana.connect().then( ({ publicKey }) => {\n      this.publicKey = publicKey.toString();\n      this.status = \"connected\";\n      console.log('connected to: ', this.publicKey);\n    });\n\n  }\n   \n\n   override render() {\n    \n     return html`\n       <h1>Connect to your Phantom Wallet.</h1>\n\n       ${this.status == \"connected\"?\n        html`<button @click=${this._onClickDisconnect} part=\"button\">\n                Disconnect\n              </button>`:\n        html`<button @click=${this._onClickConnect} part=\"button\">\n                Connect\n             </button>`}\n\n       <p>Phantom Wallet Detected: ${this.provider.isPhantom}</p>\n       <p>Status: ${this.status} </p>\n       <p>Public Address: ${this.publicKey} </p>\n     `;\n   }\n\n  private getProvider () {\n     if (\"solana\" in window) {\n       const provider = window.solana;\n       console.log(provider);\n       if (provider.isPhantom) {\n         this.provider = provider;\n       } else {\n        window.open(\"https://phantom.app/\", \"_blank\");\n       }\n     }\n   }\n \n  private async _onClickConnect() {\n    await window.solana.connect();\n  }\n\n   private async _onClickDisconnect() {\n    await window.solana.disconnect();\n  }\n\n }\n \n declare global {\n   interface HTMLElementTagNameMap {\n     'phantom-connect': PhantomConnect;\n   }\n }\n "]}